// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

use super::stdb_vector_3::StdbVector3;
#[allow(unused)]
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct UpdatePlayerPositionArgs {
    pub position: StdbVector3,
    pub direction: f32,
    pub moving: bool,
}

impl Reducer for UpdatePlayerPositionArgs {
    const REDUCER_NAME: &'static str = "update_player_position";
}

#[allow(unused)]
pub fn update_player_position(position: StdbVector3, direction: f32, moving: bool) {
    UpdatePlayerPositionArgs {
        position,
        direction,
        moving,
    }
    .invoke();
}

#[allow(unused)]
pub fn on_update_player_position(
    mut __callback: impl FnMut(&Identity, Option<Address>, &Status, &StdbVector3, &f32, &bool)
        + Send
        + 'static,
) -> ReducerCallbackId<UpdatePlayerPositionArgs> {
    UpdatePlayerPositionArgs::on_reducer(move |__identity, __addr, __status, __args| {
        let UpdatePlayerPositionArgs {
            position,
            direction,
            moving,
        } = __args;
        __callback(__identity, __addr, __status, position, direction, moving);
    })
}

#[allow(unused)]
pub fn once_on_update_player_position(
    __callback: impl FnOnce(&Identity, Option<Address>, &Status, &StdbVector3, &f32, &bool)
        + Send
        + 'static,
) -> ReducerCallbackId<UpdatePlayerPositionArgs> {
    UpdatePlayerPositionArgs::once_on_reducer(move |__identity, __addr, __status, __args| {
        let UpdatePlayerPositionArgs {
            position,
            direction,
            moving,
        } = __args;
        __callback(__identity, __addr, __status, position, direction, moving);
    })
}

#[allow(unused)]
pub fn remove_on_update_player_position(id: ReducerCallbackId<UpdatePlayerPositionArgs>) {
    UpdatePlayerPositionArgs::remove_on_reducer(id);
}
