// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using System.Collections.Generic;
using SpacetimeDB;

namespace SpacetimeDB.Types
{
	[Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
	public partial class Accounts : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("uuid")]
		public string Uuid;
		[Newtonsoft.Json.JsonProperty("username")]
		public string Username;
		[Newtonsoft.Json.JsonProperty("password")]
		public string Password;
		[Newtonsoft.Json.JsonProperty("full_name")]
		public string FullName;
		[Newtonsoft.Json.JsonProperty("nickname")]
		public string Nickname;
		[Newtonsoft.Json.JsonProperty("gender")]
		public string Gender;
		[Newtonsoft.Json.JsonProperty("universitas")]
		public string Universitas;
		[Newtonsoft.Json.JsonProperty("kodeuniv")]
		public string Kodeuniv;
		[Newtonsoft.Json.JsonProperty("fakultas")]
		public string Fakultas;
		[Newtonsoft.Json.JsonProperty("jurusan")]
		public string Jurusan;
		[Newtonsoft.Json.JsonProperty("role")]
		public string Role;

		private static Dictionary<string, Accounts> Uuid_Index = new Dictionary<string, Accounts>(16);

		private static void InternalOnValueInserted(object insertedValue)
		{
			var val = (Accounts)insertedValue;
			Uuid_Index[val.Uuid] = val;
		}

		private static void InternalOnValueDeleted(object deletedValue)
		{
			var val = (Accounts)deletedValue;
			Uuid_Index.Remove(val.Uuid);
		}

		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicType()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("uuid", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("username", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("password", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("full_name", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("nickname", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("gender", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("universitas", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("kodeuniv", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("fakultas", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("jurusan", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("role", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
			});
		}

		public static explicit operator Accounts(SpacetimeDB.SATS.AlgebraicValue value)
		{
			if (value == null) {
				return null;
			}
			var productValue = value.AsProductValue();
			return new Accounts
			{
				Uuid = productValue.elements[0].AsString(),
				Username = productValue.elements[1].AsString(),
				Password = productValue.elements[2].AsString(),
				FullName = productValue.elements[3].AsString(),
				Nickname = productValue.elements[4].AsString(),
				Gender = productValue.elements[5].AsString(),
				Universitas = productValue.elements[6].AsString(),
				Kodeuniv = productValue.elements[7].AsString(),
				Fakultas = productValue.elements[8].AsString(),
				Jurusan = productValue.elements[9].AsString(),
				Role = productValue.elements[10].AsString(),
			};
		}

		public static System.Collections.Generic.IEnumerable<Accounts> Iter()
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				yield return (Accounts)entry.Item2;
			}
		}
		public static int Count()
		{
			return SpacetimeDBClient.clientDB.Count("Accounts");
		}
		public static Accounts FilterByUuid(string value)
		{
			Uuid_Index.TryGetValue(value, out var r);
			return r;
		}

		public static System.Collections.Generic.IEnumerable<Accounts> FilterByUsername(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[1].AsString();
				if (compareValue == value) {
					yield return (Accounts)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Accounts> FilterByPassword(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[2].AsString();
				if (compareValue == value) {
					yield return (Accounts)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Accounts> FilterByFullName(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[3].AsString();
				if (compareValue == value) {
					yield return (Accounts)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Accounts> FilterByNickname(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[4].AsString();
				if (compareValue == value) {
					yield return (Accounts)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Accounts> FilterByGender(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[5].AsString();
				if (compareValue == value) {
					yield return (Accounts)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Accounts> FilterByUniversitas(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[6].AsString();
				if (compareValue == value) {
					yield return (Accounts)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Accounts> FilterByKodeuniv(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[7].AsString();
				if (compareValue == value) {
					yield return (Accounts)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Accounts> FilterByFakultas(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[8].AsString();
				if (compareValue == value) {
					yield return (Accounts)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Accounts> FilterByJurusan(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[9].AsString();
				if (compareValue == value) {
					yield return (Accounts)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Accounts> FilterByRole(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Accounts"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[10].AsString();
				if (compareValue == value) {
					yield return (Accounts)entry.Item2;
				}
			}
		}

		public static bool ComparePrimaryKey(SpacetimeDB.SATS.AlgebraicType t, SpacetimeDB.SATS.AlgebraicValue v1, SpacetimeDB.SATS.AlgebraicValue v2)
		{
			var primaryColumnValue1 = v1.AsProductValue().elements[0];
			var primaryColumnValue2 = v2.AsProductValue().elements[0];
			return SpacetimeDB.SATS.AlgebraicValue.Compare(t.product.elements[0].algebraicType, primaryColumnValue1, primaryColumnValue2);
		}

		public static SpacetimeDB.SATS.AlgebraicValue GetPrimaryKeyValue(SpacetimeDB.SATS.AlgebraicValue v)
		{
			return v.AsProductValue().elements[0];
		}

		public static SpacetimeDB.SATS.AlgebraicType GetPrimaryKeyType(SpacetimeDB.SATS.AlgebraicType t)
		{
			return t.product.elements[0].algebraicType;
		}

		public delegate void InsertEventHandler(Accounts insertedValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public delegate void UpdateEventHandler(Accounts oldValue, Accounts newValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public delegate void DeleteEventHandler(Accounts deletedValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public delegate void RowUpdateEventHandler(SpacetimeDBClient.TableOp op, Accounts oldValue, Accounts newValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public static event InsertEventHandler OnInsert;
		public static event UpdateEventHandler OnUpdate;
		public static event DeleteEventHandler OnBeforeDelete;
		public static event DeleteEventHandler OnDelete;
		public static event RowUpdateEventHandler OnRowUpdate;

		public static void OnInsertEvent(object newValue, ClientApi.Event dbEvent)
		{
			OnInsert?.Invoke((Accounts)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnUpdateEvent(object oldValue, object newValue, ClientApi.Event dbEvent)
		{
			OnUpdate?.Invoke((Accounts)oldValue,(Accounts)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnBeforeDeleteEvent(object oldValue, ClientApi.Event dbEvent)
		{
			OnBeforeDelete?.Invoke((Accounts)oldValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnDeleteEvent(object oldValue, ClientApi.Event dbEvent)
		{
			OnDelete?.Invoke((Accounts)oldValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnRowUpdateEvent(SpacetimeDBClient.TableOp op, object oldValue, object newValue, ClientApi.Event dbEvent)
		{
			OnRowUpdate?.Invoke(op, (Accounts)oldValue,(Accounts)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}
	}
}
