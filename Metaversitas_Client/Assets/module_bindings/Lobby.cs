// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using System.Collections.Generic;
using SpacetimeDB;

namespace SpacetimeDB.Types
{
	[Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
	public partial class Lobby : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("id")]
		public uint Id;
		[Newtonsoft.Json.JsonProperty("identity")]
		public SpacetimeDB.Identity Identity;
		[Newtonsoft.Json.JsonProperty("Kelas")]
		public string Kelas;
		[Newtonsoft.Json.JsonProperty("Materi")]
		public string Materi;
		[Newtonsoft.Json.JsonProperty("Pertemuan")]
		public string Pertemuan;
		[Newtonsoft.Json.JsonProperty("TimeLimit")]
		public ulong TimeLimit;
		[Newtonsoft.Json.JsonProperty("participants")]
		public System.Collections.Generic.List<SpacetimeDB.Identity> Participants;

		private static Dictionary<uint, Lobby> Id_Index = new Dictionary<uint, Lobby>(16);

		private static void InternalOnValueInserted(object insertedValue)
		{
			var val = (Lobby)insertedValue;
			Id_Index[val.Id] = val;
		}

		private static void InternalOnValueDeleted(object deletedValue)
		{
			var val = (Lobby)deletedValue;
			Id_Index.Remove(val.Id);
		}

		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicType()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("id", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("identity", SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("__identity_bytes", SpacetimeDB.SATS.AlgebraicType.CreateArrayType(SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U8))),
			})),
				new SpacetimeDB.SATS.ProductTypeElement("Kelas", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("Materi", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("Pertemuan", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("TimeLimit", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U64)),
				new SpacetimeDB.SATS.ProductTypeElement("participants", SpacetimeDB.SATS.AlgebraicType.CreateArrayType(SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("__identity_bytes", SpacetimeDB.SATS.AlgebraicType.CreateArrayType(SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U8))),
			}))),
			});
		}

		public static explicit operator Lobby(SpacetimeDB.SATS.AlgebraicValue value)
		{
			if (value == null) {
				return null;
			}
			var productValue = value.AsProductValue();
			return new Lobby
			{
				Id = productValue.elements[0].AsU32(),
				Identity = SpacetimeDB.Identity.From(productValue.elements[1].AsProductValue().elements[0].AsBytes()),
				Kelas = productValue.elements[2].AsString(),
				Materi = productValue.elements[3].AsString(),
				Pertemuan = productValue.elements[4].AsString(),
				TimeLimit = productValue.elements[5].AsU64(),
				Participants = ((System.Func<System.Collections.Generic.List<SpacetimeDB.Identity>>)(() => {
			var vec0 = new System.Collections.Generic.List<SpacetimeDB.Identity>();
			var vec0_source = productValue.elements[6].AsArray();
			foreach(var entry in vec0_source!)
			{
				vec0.Add(SpacetimeDB.Identity.From(entry.AsProductValue().elements[0].AsBytes()));
			}
			return vec0;
		}))(),
			};
		}

		public static System.Collections.Generic.IEnumerable<Lobby> Iter()
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Lobby"))
			{
				yield return (Lobby)entry.Item2;
			}
		}
		public static int Count()
		{
			return SpacetimeDBClient.clientDB.Count("Lobby");
		}
		public static Lobby FilterById(uint value)
		{
			Id_Index.TryGetValue(value, out var r);
			return r;
		}

		public static System.Collections.Generic.IEnumerable<Lobby> FilterByIdentity(SpacetimeDB.Identity value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Lobby"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = Identity.From(productValue.elements[1].AsProductValue().elements[0].AsBytes());
				if (compareValue == value) {
					yield return (Lobby)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Lobby> FilterByKelas(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Lobby"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[2].AsString();
				if (compareValue == value) {
					yield return (Lobby)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Lobby> FilterByMateri(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Lobby"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[3].AsString();
				if (compareValue == value) {
					yield return (Lobby)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Lobby> FilterByPertemuan(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Lobby"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[4].AsString();
				if (compareValue == value) {
					yield return (Lobby)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Lobby> FilterByTimeLimit(ulong value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Lobby"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (ulong)productValue.elements[5].AsU64();
				if (compareValue == value) {
					yield return (Lobby)entry.Item2;
				}
			}
		}

		public static bool ComparePrimaryKey(SpacetimeDB.SATS.AlgebraicType t, SpacetimeDB.SATS.AlgebraicValue v1, SpacetimeDB.SATS.AlgebraicValue v2)
		{
			var primaryColumnValue1 = v1.AsProductValue().elements[0];
			var primaryColumnValue2 = v2.AsProductValue().elements[0];
			return SpacetimeDB.SATS.AlgebraicValue.Compare(t.product.elements[0].algebraicType, primaryColumnValue1, primaryColumnValue2);
		}

		public static SpacetimeDB.SATS.AlgebraicValue GetPrimaryKeyValue(SpacetimeDB.SATS.AlgebraicValue v)
		{
			return v.AsProductValue().elements[0];
		}

		public static SpacetimeDB.SATS.AlgebraicType GetPrimaryKeyType(SpacetimeDB.SATS.AlgebraicType t)
		{
			return t.product.elements[0].algebraicType;
		}

		public delegate void InsertEventHandler(Lobby insertedValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public delegate void UpdateEventHandler(Lobby oldValue, Lobby newValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public delegate void DeleteEventHandler(Lobby deletedValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public delegate void RowUpdateEventHandler(SpacetimeDBClient.TableOp op, Lobby oldValue, Lobby newValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public static event InsertEventHandler OnInsert;
		public static event UpdateEventHandler OnUpdate;
		public static event DeleteEventHandler OnBeforeDelete;
		public static event DeleteEventHandler OnDelete;
		public static event RowUpdateEventHandler OnRowUpdate;

		public static void OnInsertEvent(object newValue, ClientApi.Event dbEvent)
		{
			OnInsert?.Invoke((Lobby)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnUpdateEvent(object oldValue, object newValue, ClientApi.Event dbEvent)
		{
			OnUpdate?.Invoke((Lobby)oldValue,(Lobby)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnBeforeDeleteEvent(object oldValue, ClientApi.Event dbEvent)
		{
			OnBeforeDelete?.Invoke((Lobby)oldValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnDeleteEvent(object oldValue, ClientApi.Event dbEvent)
		{
			OnDelete?.Invoke((Lobby)oldValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnRowUpdateEvent(SpacetimeDBClient.TableOp op, object oldValue, object newValue, ClientApi.Event dbEvent)
		{
			OnRowUpdate?.Invoke(op, (Lobby)oldValue,(Lobby)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}
	}
}
