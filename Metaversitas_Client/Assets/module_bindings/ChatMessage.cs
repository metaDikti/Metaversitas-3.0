// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using System.Collections.Generic;
using SpacetimeDB;

namespace SpacetimeDB.Types
{
	[Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
	public partial class ChatMessage : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("chat_entity_id")]
		public ulong ChatEntityId;
		[Newtonsoft.Json.JsonProperty("source_entity_id")]
		public SpacetimeDB.Identity SourceEntityId;
		[Newtonsoft.Json.JsonProperty("lobby_id")]
		public uint LobbyId;
		[Newtonsoft.Json.JsonProperty("recipient_id")]
		[SpacetimeDB.Some]
		public SpacetimeDB.Identity RecipientId;
		[Newtonsoft.Json.JsonProperty("chat_text")]
		public string ChatText;
		[Newtonsoft.Json.JsonProperty("timestamp")]
		public ulong Timestamp;

		private static Dictionary<ulong, ChatMessage> ChatEntityId_Index = new Dictionary<ulong, ChatMessage>(16);

		private static void InternalOnValueInserted(object insertedValue)
		{
			var val = (ChatMessage)insertedValue;
			ChatEntityId_Index[val.ChatEntityId] = val;
		}

		private static void InternalOnValueDeleted(object deletedValue)
		{
			var val = (ChatMessage)deletedValue;
			ChatEntityId_Index.Remove(val.ChatEntityId);
		}

		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicType()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("chat_entity_id", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U64)),
				new SpacetimeDB.SATS.ProductTypeElement("source_entity_id", SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("__identity_bytes", SpacetimeDB.SATS.AlgebraicType.CreateArrayType(SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U8))),
			})),
				new SpacetimeDB.SATS.ProductTypeElement("lobby_id", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U32)),
				new SpacetimeDB.SATS.ProductTypeElement("recipient_id", SpacetimeDB.SATS.AlgebraicType.CreateSumType(new System.Collections.Generic.List<SpacetimeDB.SATS.SumTypeVariant>
			{
				new SpacetimeDB.SATS.SumTypeVariant("some", SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("__identity_bytes", SpacetimeDB.SATS.AlgebraicType.CreateArrayType(SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U8))),
			})),
				new SpacetimeDB.SATS.SumTypeVariant("none", SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
			})),
			})),
				new SpacetimeDB.SATS.ProductTypeElement("chat_text", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.String)),
				new SpacetimeDB.SATS.ProductTypeElement("timestamp", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.U64)),
			});
		}

		public static explicit operator ChatMessage(SpacetimeDB.SATS.AlgebraicValue value)
		{
			if (value == null) {
				return null;
			}
			var productValue = value.AsProductValue();
			return new ChatMessage
			{
				ChatEntityId = productValue.elements[0].AsU64(),
				SourceEntityId = SpacetimeDB.Identity.From(productValue.elements[1].AsProductValue().elements[0].AsBytes()),
				LobbyId = productValue.elements[2].AsU32(),
				RecipientId = SpacetimeDB.Identity.From(productValue.elements[3].AsSumValue().tag == 1 ? null : productValue.elements[3].AsSumValue().value.AsProductValue().elements[0].AsBytes()),
				ChatText = productValue.elements[4].AsString(),
				Timestamp = productValue.elements[5].AsU64(),
			};
		}

		public static System.Collections.Generic.IEnumerable<ChatMessage> Iter()
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("ChatMessage"))
			{
				yield return (ChatMessage)entry.Item2;
			}
		}
		public static int Count()
		{
			return SpacetimeDBClient.clientDB.Count("ChatMessage");
		}
		public static ChatMessage FilterByChatEntityId(ulong value)
		{
			ChatEntityId_Index.TryGetValue(value, out var r);
			return r;
		}

		public static System.Collections.Generic.IEnumerable<ChatMessage> FilterBySourceEntityId(SpacetimeDB.Identity value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("ChatMessage"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = Identity.From(productValue.elements[1].AsProductValue().elements[0].AsBytes());
				if (compareValue == value) {
					yield return (ChatMessage)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<ChatMessage> FilterByLobbyId(uint value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("ChatMessage"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (uint)productValue.elements[2].AsU32();
				if (compareValue == value) {
					yield return (ChatMessage)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<ChatMessage> FilterByChatText(string value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("ChatMessage"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (string)productValue.elements[4].AsString();
				if (compareValue == value) {
					yield return (ChatMessage)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<ChatMessage> FilterByTimestamp(ulong value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("ChatMessage"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (ulong)productValue.elements[5].AsU64();
				if (compareValue == value) {
					yield return (ChatMessage)entry.Item2;
				}
			}
		}

		public static bool ComparePrimaryKey(SpacetimeDB.SATS.AlgebraicType t, SpacetimeDB.SATS.AlgebraicValue v1, SpacetimeDB.SATS.AlgebraicValue v2)
		{
			var primaryColumnValue1 = v1.AsProductValue().elements[0];
			var primaryColumnValue2 = v2.AsProductValue().elements[0];
			return SpacetimeDB.SATS.AlgebraicValue.Compare(t.product.elements[0].algebraicType, primaryColumnValue1, primaryColumnValue2);
		}

		public static SpacetimeDB.SATS.AlgebraicValue GetPrimaryKeyValue(SpacetimeDB.SATS.AlgebraicValue v)
		{
			return v.AsProductValue().elements[0];
		}

		public static SpacetimeDB.SATS.AlgebraicType GetPrimaryKeyType(SpacetimeDB.SATS.AlgebraicType t)
		{
			return t.product.elements[0].algebraicType;
		}

		public delegate void InsertEventHandler(ChatMessage insertedValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public delegate void UpdateEventHandler(ChatMessage oldValue, ChatMessage newValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public delegate void DeleteEventHandler(ChatMessage deletedValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public delegate void RowUpdateEventHandler(SpacetimeDBClient.TableOp op, ChatMessage oldValue, ChatMessage newValue, SpacetimeDB.Types.ReducerEvent dbEvent);
		public static event InsertEventHandler OnInsert;
		public static event UpdateEventHandler OnUpdate;
		public static event DeleteEventHandler OnBeforeDelete;
		public static event DeleteEventHandler OnDelete;
		public static event RowUpdateEventHandler OnRowUpdate;

		public static void OnInsertEvent(object newValue, ClientApi.Event dbEvent)
		{
			OnInsert?.Invoke((ChatMessage)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnUpdateEvent(object oldValue, object newValue, ClientApi.Event dbEvent)
		{
			OnUpdate?.Invoke((ChatMessage)oldValue,(ChatMessage)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnBeforeDeleteEvent(object oldValue, ClientApi.Event dbEvent)
		{
			OnBeforeDelete?.Invoke((ChatMessage)oldValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnDeleteEvent(object oldValue, ClientApi.Event dbEvent)
		{
			OnDelete?.Invoke((ChatMessage)oldValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnRowUpdateEvent(SpacetimeDBClient.TableOp op, object oldValue, object newValue, ClientApi.Event dbEvent)
		{
			OnRowUpdate?.Invoke(op, (ChatMessage)oldValue,(ChatMessage)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}
	}
}
